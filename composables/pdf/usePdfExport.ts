import { PDFDocument, rgb, StandardFonts } from 'pdf-lib'
import type { ResumeData, Recommendation } from '~/types/resume'

export function usePdfExport() {
  async function exportRecommendations(resume: ResumeData, recommendations: Recommendation[]) {
    const pdfDoc = await PDFDocument.create()
    let currentPage = pdfDoc.addPage()
    const { width } = currentPage.getSize()
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica)
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)

    const margin = 50
    let y = currentPage.getSize().height - margin

    // Title
    currentPage.drawText('CareerGPT Analysis Report', {
      x: margin,
      y,
      size: 24,
      font: boldFont,
      color: rgb(0, 0, 0)
    })
    y -= 40

    // Resume Details
    currentPage.drawText('Resume: ' + resume.title, {
      x: margin,
      y,
      size: 14,
      font: boldFont,
      color: rgb(0, 0, 0)
    })
    y -= 30

    // Recommendations sections
    const sections = {
      resume_improvement: 'Resume Improvements',
      career_path: 'Career Path Suggestions',
      learning: 'Learning Recommendations'
    }

    for (const [type, title] of Object.entries(sections)) {
      const typeRecs = recommendations.filter(r => r.type === type)
      if (typeRecs.length === 0) continue

      if (y < margin + 100) {
        currentPage = pdfDoc.addPage()
        y = currentPage.getSize().height - margin
      }

      // Add section title
      currentPage.drawText(title, {
        x: margin,
        y,
        size: 16,
        font: boldFont,
        color: rgb(0, 0, 0)
      })
      y -= 20

      // Add recommendations
      for (const rec of typeRecs) {
        const lines = splitTextToLines(rec.content, font, 12, width - 2 * margin)
        for (const line of lines) {
          if (y < margin + 50) {
            currentPage = pdfDoc.addPage()
            y = currentPage.getSize().height - margin
          }
          currentPage.drawText(line, {
            x: margin + 10,
            y,
            size: 12,
            font,
            color: rgb(0, 0, 0)
          })
          y -= 20
        }
        y -= 10 // Add spacing between recommendations
      }
      y -= 20 // Add spacing between sections
    }

    // Add footer to the last page
    currentPage.drawText('Generated by CareerGPT - ' + new Date().toLocaleDateString(), {
      x: margin,
      y: margin,
      size: 10,
      font,
      color: rgb(0.5, 0.5, 0.5)
    })

    return pdfDoc.save()
  }

  // Helper function to split text into lines that fit within the page width
  function splitTextToLines(text: string, font: any, fontSize: number, maxWidth: number): string[] {
    const words = text.split(' ')
    const lines: string[] = []
    let currentLine = ''

    for (const word of words) {
      const testLine = currentLine ? `${currentLine} ${word}` : word
      const width = font.widthOfTextAtSize(testLine, fontSize)

      if (width > maxWidth) {
        lines.push(currentLine)
        currentLine = word
      } else {
        currentLine = testLine
      }
    }
    if (currentLine) {
      lines.push(currentLine)
    }

    return lines
  }

  return {
    exportRecommendations
  }
}
